import React, { useState, useEffect } from 'react';
import { AlertCircle, CheckCircle } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const MAZE_SIZE = 5;
const QUESTIONS = [
  {
    question: "What does 'GenAI' stand for?",
    options: ["General AI", "Generative AI", "Genetic AI", "Genuine AI"],
    correctAnswer: 1
  },
  {
    question: "Which of these is NOT a popular GenAI model?",
    options: ["GPT-3", "DALL-E", "BERT", "MidJourney"],
    correctAnswer: 2
  },
  {
    question: "What type of data is primarily used to train large language models?",
    options: ["Images", "Text", "Audio", "Video"],
    correctAnswer: 1
  },
  {
    question: "Which company created the ChatGPT model?",
    options: ["Google", "Microsoft", "OpenAI", "Facebook"],
    correctAnswer: 2
  },
  {
    question: "What is the main purpose of GenAI in image generation?",
    options: ["Editing existing images", "Creating new images from text descriptions", "Recognizing objects in images", "Compressing image files"],
    correctAnswer: 1
  }
];

const GenAIMazeAdventure = () => {
  const [playerPosition, setPlayerPosition] = useState([0, 0]);
  const [score, setScore] = useState(0);
  const [time, setTime] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [message, setMessage] = useState(null);

  useEffect(() => {
    const timer = setInterval(() => {
      setTime((prevTime) => prevTime + 1);
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    if (playerPosition[0] === MAZE_SIZE - 1 && playerPosition[1] === MAZE_SIZE - 1) {
      setGameOver(true);
    } else {
      setCurrentQuestion(QUESTIONS[Math.floor(Math.random() * QUESTIONS.length)]);
    }
  }, [playerPosition]);

  const handleAnswer = (answerIndex) => {
    if (answerIndex === currentQuestion.correctAnswer) {
      setScore((prevScore) => prevScore + 5);
      setMessage({ type: 'success', text: 'Correct! Move to an adjacent cell.' });
      playSound('correct');
    } else {
      setScore((prevScore) => prevScore - 1);
      setMessage({ type: 'error', text: 'Incorrect. Try another question.' });
      playSound('incorrect');
      setCurrentQuestion(QUESTIONS[Math.floor(Math.random() * QUESTIONS.length)]);
    }
  };

  const handleMove = (direction) => {
    setPlayerPosition((prevPos) => {
      const newPos = [...prevPos];
      switch (direction) {
        case 'up':
          if (newPos[0] > 0) newPos[0]--;
          break;
        case 'down':
          if (newPos[0] < MAZE_SIZE - 1) newPos[0]++;
          break;
        case 'left':
          if (newPos[1] > 0) newPos[1]--;
          break;
        case 'right':
          if (newPos[1] < MAZE_SIZE - 1) newPos[1]++;
          break;
      }
      return newPos;
    });
    setMessage(null);
  };

  const playSound = (type) => {
    const audio = new Audio(`/sounds/${type}.mp3`);
    audio.play();
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <h1 className="text-4xl font-bold mb-4 text-blue-600">GenAI Maze Adventure</h1>
      <div className="mb-4">
        <span className="font-bold">Score: {score}</span> | 
        <span className="font-bold ml-4">Time: {time}s</span>
      </div>
      <div className="grid grid-cols-5 gap-2 mb-4">
        {[...Array(MAZE_SIZE)].map((_, rowIndex) => (
          [...Array(MAZE_SIZE)].map((_, colIndex) => (
            <div 
              key={`${rowIndex}-${colIndex}`}
              className={`w-16 h-16 flex items-center justify-center border-2 border-gray-300 ${
                rowIndex === playerPosition[0] && colIndex === playerPosition[1]
                  ? 'bg-blue-500 text-white'
                  : rowIndex === 0 && colIndex === 0
                  ? 'bg-green-500'
                  : rowIndex === MAZE_SIZE - 1 && colIndex === MAZE_SIZE - 1
                  ? 'bg-yellow-500'
                  : 'bg-white'
              }`}
            >
              {rowIndex === playerPosition[0] && colIndex === playerPosition[1] && 'ðŸ‘¤'}
            </div>
          ))
        ))}
      </div>
      {!gameOver && currentQuestion && (
        <div className="mb-4 text-center">
          <h2 className="text-xl font-bold mb-2">{currentQuestion.question}</h2>
          <div className="grid grid-cols-2 gap-2">
            {currentQuestion.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswer(index)}
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
              >
                {option}
              </button>
            ))}
          </div>
        </div>
      )}
      {message && (
        <Alert variant={message.type === 'success' ? 'default' : 'destructive'} className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>{message.type === 'success' ? 'Success' : 'Error'}</AlertTitle>
          <AlertDescription>{message.text}</AlertDescription>
        </Alert>
      )}
      {!gameOver && (
        <div className="grid grid-cols-3 gap-2">
          <button onClick={() => handleMove('up')} className="bg-gray-300 hover:bg-gray-400 py-2 px-4 rounded">Up</button>
          <button onClick={() => handleMove('left')} className="bg-gray-300 hover:bg-gray-400 py-2 px-4 rounded">Left</button>
          <button onClick={() => handleMove('right')} className="bg-gray-300 hover:bg-gray-400 py-2 px-4 rounded">Right</button>
          <button onClick={() => handleMove('down')} className="col-start-2 bg-gray-300 hover:bg-gray-400 py-2 px-4 rounded">Down</button>
        </div>
      )}
      {gameOver && (
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-2">Congratulations! You've completed the maze!</h2>
          <p>Final Score: {score}</p>
          <p>Time: {time} seconds</p>
        </div>
      )}
    </div>
  );
};

export default GenAIMazeAdventure;
